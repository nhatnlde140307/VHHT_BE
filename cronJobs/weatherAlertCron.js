import dotenv from 'dotenv';
import cron from 'node-cron';
import { getIO } from '../socket/socket.js';
import fetch from 'node-fetch';

dotenv.config();

const API_KEY = process.env.API_KEY_WEATHER;
const DEV_FORCE_STORM = process.env.DEV_FORCE_STORM === 'true';
const HATINH_QUERY = 'Ha Tinh';

function getWindLevel(kph) {
  if (kph < 39) return "D∆∞·ªõi c·∫•p 6";
  if (kph < 50) return "C·∫•p 6";
  if (kph < 62) return "C·∫•p 7";
  if (kph < 75) return "C·∫•p 8";
  if (kph < 89) return "C·∫•p 9";
  if (kph < 103) return "C·∫•p 10";
  if (kph < 118) return "C·∫•p 11";
  return "C·∫•p 12+ (si√™u b√£o)";
}

function formatTime(isoString) {
  return new Date(isoString).toLocaleString('vi-VN', {
    timeZone: 'Asia/Bangkok',
    hour12: false,
  });
}

// ‚è∞ Cron m·ªói 2 ti·∫øng (v√†o ph√∫t 0)
cron.schedule('*/30 * * * * *', async () => {
// cron.schedule('0 */30 * * * *', async () => {
  try {
    const url = `https://api.weatherapi.com/v1/forecast.json?q=${encodeURIComponent(HATINH_QUERY)}&days=1&alerts=yes&key=${API_KEY}`;
    const res = await fetch(url);
    const data = await res.json();

    const current = data.current;
    const location = data.location;
    let alerts = data.alerts?.alert || [];

    // N·∫øu kh√¥ng c√≥ c·∫£nh b√°o nh∆∞ng b·∫≠t DEV_FORCE_STORM ‚Üí ch√®n alert gi·∫£
    if (alerts.length === 0 && DEV_FORCE_STORM) {
      console.log('üß™ DEV_FORCE_STORM: Ch√®n alert gi·∫£ l·∫≠p.');
      alerts = [
        {
          headline: "[GI·∫¢ L·∫¨P] B√£o LINFA",
          event: "Tropical Storm",
          desc: "B√£o c·∫•p 10, gi·∫≠t c·∫•p 12, d·ª± ki·∫øn ƒë·ªï b·ªô t·ª´ 14h.",
          areas: "Ha Tinh",
          instruction: "H·∫°n ch·∫ø ra ngo√†i, theo d√µi c·∫£nh b√°o.",
          effective: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
          expires: new Date(Date.now() + 6 * 60 * 60 * 1000).toISOString(),
          isMock: true,
        },
      ];
    }

    // N·∫øu kh√¥ng c√≥ c·∫£nh b√°o th·∫≠t v√† kh√¥ng ph·∫£i ch·∫ø ƒë·ªô dev ‚Üí kh√¥ng emit
    if (alerts.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ c·∫£nh b√°o th·ªùi ti·∫øt n√†o, kh√¥ng emit.');
      return;
    }

    const weatherSummary = {
      location: {
        name: location?.name,
        country: location?.country,
      },
      weather: {
        condition: current?.condition?.text,
        temp_c: current?.temp_c,
        feelslike_c: current?.feelslike_c,
        wind_kph: current?.wind_kph,
        windLevel: getWindLevel(current?.wind_kph),
        humidity: current?.humidity,
        pressure_mb: current?.pressure_mb,
        uv: current?.uv,
      },
      alerts: alerts.map(alert => ({
        headline: alert.headline,
        event: alert.event,
        desc: alert.desc,
        areas: alert.areas,
        instruction: alert.instruction,
        effective: formatTime(alert.effective),
        expires: formatTime(alert.expires),
        isMock: alert.isMock || false,
      })),
      timestamp: new Date().toISOString(),
    };

    getIO().emit('weather:update', weatherSummary);
    console.log('üì° ƒê√£ emit weather:update t·ªõi FE:', JSON.stringify(weatherSummary, null, 2));

  } catch (err) {
    console.error('‚ùå L·ªói khi emit weather cron:', err);
  }
});
