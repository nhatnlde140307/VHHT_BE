from datetime import datetime
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from openai import OpenAI

# üîπ Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()

# üîë L·∫•y API key
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# üîπ K·∫øt n·ªëi MongoDB
mongo_uri = os.getenv("MONGO_URI")
mongo_client = MongoClient(mongo_uri)
collection = mongo_client["VHHT"]["campaigns"]

# üîπ H√†m ƒë·ªãnh d·∫°ng ng√†y
def format_date(d):
    try:
        return datetime.strptime(str(d), "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d/%m/%Y")
    except:
        return str(d)

# üîπ H√†m ƒë·ªãnh d·∫°ng v·ªã tr√≠
def format_location(loc):
    if not loc or 'coordinates' not in loc:
        return "Kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠."
    return f"ƒê·ªãa ch·ªâ: {loc.get('address', 'N/A')}, T·ªça ƒë·ªô: {loc['coordinates']}"

# üîπ H√†m ƒë·ªãnh d·∫°ng t√¨nh nguy·ªán vi√™n
def format_volunteers(volunteers):
    if not volunteers:
        return "Kh√¥ng c√≥ t√¨nh nguy·ªán vi√™n."
    return f"T·ªïng s·ªë: {len(volunteers)}, Tr·∫°ng th√°i: {', '.join([v['status'] for v in volunteers[:3]])}" + \
           (f" v√† {len(volunteers) - 3} ng∆∞·ªùi kh√°c" if len(volunteers) > 3 else "")

# üîπ H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
def answer_user_question(user_input: str):
    # Ph√¢n lo·∫°i √Ω ƒë·ªãnh c√¢u h·ªèi
    user_input_lower = user_input.lower()
    query = {}
    intent = None

    if any(keyword in user_input_lower for keyword in ["ƒëang ch·∫°y", "di·ªÖn ra", "in-progress"]):
        intent = "query_active_campaigns"
        query = {"status": "in-progress"}
    elif any(keyword in user_input_lower for keyword in ["k·∫øt th√∫c", "completed"]):
        intent = "query_completed_campaigns"
        query = {"status": "completed"}
    elif any(keyword in user_input_lower for keyword in ["s·∫Øp t·ªõi", "upcoming"]):
        intent = "query_upcoming_campaigns"
        query = {"status": "upcoming"}
    elif any(keyword in user_input_lower for keyword in ["ng√¢n s√°ch", "budget"]):
        intent = "query_budget"
        query = {}  # L·∫•y t·∫•t c·∫£ ƒë·ªÉ t√¨m ng√¢n s√°ch
    elif any(keyword in user_input_lower for keyword in ["t√¨nh nguy·ªán", "volunteer"]):
        intent = "query_volunteers"
        query = {"volunteers": {"$ne": []}}  # C√≥ t√¨nh nguy·ªán vi√™n
    elif any(keyword in user_input_lower for keyword in ["ƒë·ªãa ƒëi·ªÉm", "v·ªã tr√≠", "location", "ƒë·ªãa ch·ªâ"]):
        intent = "query_location"
        query = {"location": {"$exists": True}}
    elif any(keyword in user_input_lower for keyword in ["m√¥ t·∫£", "description"]):
        intent = "query_description"
        query = {"description": {"$ne": ""}}
    elif any(keyword in user_input_lower for keyword in ["ch·ª©ng nh·∫≠n", "certificate"]):
        intent = "query_certificates"
        query = {"certificatesIssued": True}
    else:
        # X·ª≠ l√Ω c√¢u h·ªèi t·ªïng qu√°t
        prompt = f"Ng∆∞·ªùi d√πng h·ªèi: {user_input}\n‚Üí Tr·∫£ l·ªùi nh∆∞ m·ªôt tr·ª£ l√Ω AI, s·ª≠ d·ª•ng ki·∫øn th·ª©c chung."
        try:
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content
        except Exception as e:
            print("‚ùå Chat error:", e)
            return "L·ªói khi g·ªçi m√¥ h√¨nh AI."

    # Truy xu·∫•t d·ªØ li·ªáu t·ª´ MongoDB
    try:
        docs = list(collection.find(query).limit(5))  # Gi·ªõi h·∫°n 5 k·∫øt qu·∫£ ƒë·ªÉ tr√°nh qu√° t·∫£i
    except Exception as e:
        print("‚ùå MongoDB error:", e)
        return "Kh√¥ng th·ªÉ k·∫øt n·ªëi d·ªØ li·ªáu."

    if not docs:
        return f"Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch ph√π h·ª£p v·ªõi y√™u c·∫ßu: {user_input}"

    # T·∫°o summary d·ªØ li·ªáu
    summary = "\n".join(
        f"- T√™n: {d['name']}\n"
        f"  Tr·∫°ng th√°i: {d.get('status', 'N/A')}\n"
        f"  Th·ªùi gian: {format_date(d['startDate'])} ƒë·∫øn {format_date(d['endDate'])}\n"
        f"  M√¥ t·∫£: {d.get('description', 'N/A')}\n"
        f"  V·ªã tr√≠: {format_location(d.get('location'))}\n"
        f"  T√¨nh nguy·ªán vi√™n: {format_volunteers(d.get('volunteers', []))}\n"
        f"  Ch·ª©ng nh·∫≠n: {'ƒê√£ ph√°t' if d.get('certificatesIssued', False) else 'Ch∆∞a ph√°t'}"
        for d in docs
    )

    # Prompt v·ªõi schema v√† d·ªØ li·ªáu
    prompt = f"""D·ªØ li·ªáu chi·∫øn d·ªãch c√≥ c√°c tr∆∞·ªùng:
- name: T√™n chi·∫øn d·ªãch (string)
- description: M√¥ t·∫£ chi·∫øn d·ªãch (string)
- startDate: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
- endDate: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
- location: V·ªã tr√≠ (address: string, coordinates: [number, number])
- volunteers: Danh s√°ch t√¨nh nguy·ªán vi√™n (m·ªói ng∆∞·ªùi c√≥ user, status: pending/approved/rejected, evaluation, feedback)
- certificatesIssued: Ch·ª©ng nh·∫≠n ƒë√£ ph√°t h√†nh (boolean)
- status: Tr·∫°ng th√°i (upcoming, in-progress, completed)

D·ªØ li·ªáu truy xu·∫•t:
{summary}

C√¢u h·ªèi: {user_input}
‚Üí Tr·∫£ l·ªùi ch√≠nh x√°c, s·ª≠ d·ª•ng th√¥ng tin t·ª´ d·ªØ li·ªáu n·∫øu c√≥. N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p, tr·∫£ l·ªùi "Kh√¥ng t√¨m th·∫•y th√¥ng tin." 
‚Üí Tr·∫£ l·ªùi th√¢n thi·ªán, d·ªÖ hi·ªÉu, v√† t·∫≠p trung v√†o th√¥ng tin ƒë∆∞·ª£c h·ªèi."""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    except Exception as e:
        print("‚ùå Chat error:", e)
        return "L·ªói khi g·ªçi m√¥ h√¨nh AI."