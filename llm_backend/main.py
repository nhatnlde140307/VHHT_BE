from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from deepface import DeepFace
import numpy as np
from PIL import Image
import io
import os
import base64
import pymongo
from bson import ObjectId
from dotenv import load_dotenv
import logging
from base64 import b64encode
from ai_logic import answer_user_question  # Logic chatbot
from typing import Optional

# === Logger setup ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Load bi·∫øn m√¥i tr∆∞·ªùng ===
load_dotenv()

# === T·∫°o app FastAPI ===
app = FastAPI()

# === CORS ===
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho t·∫•t c·∫£ frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === K·∫øt n·ªëi MongoDB ===
mongo_uri = os.getenv("MONGO_URI")
if not mongo_uri:
    logger.error("‚ùå MONGO_URI kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env")
    raise ValueError("MONGO_URI kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p")

try:
    mongo_client = pymongo.MongoClient(mongo_uri)
    db = mongo_client["VHHT"]
    campaign_collection = db["campaigns"]
    donation_campaign_collection = db["donationCampaigns"]
    donor_profile_collection = db["donorProfiles"]
    user_collection = db["users"]
    logger.info("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng")
except Exception as e:
    logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {str(e)}")
    raise

# === Pydantic Models ===
class ChatData(BaseModel):
    message: str

class ImageData(BaseModel):
    user_id: str
    image: str  # base64 encoded image
    campaignId: str
    phaseId: str
    phasedayId: str
    method: str

# === Helper: base64 ‚Üí numpy image array ===
def base64_to_image(base64_str):
    try:
        if "," in base64_str:
            base64_str = base64_str.split(",")[1]
        img_data = base64.b64decode(base64_str)
        img = Image.open(io.BytesIO(img_data)).convert("RGB")
        return np.array(img)
    except Exception as e:
        raise ValueError(f"L·ªói gi·∫£i m√£ ·∫£nh base64: {e}")

# === Endpoint: ƒêƒÉng k√Ω khu√¥n m·∫∑t ===
@app.post("/register")
async def register_face(user_id: str = Form(...), file: UploadFile = File(...)):
    try:
        # ƒê·ªçc ·∫£nh t·ª´ file upload
        image_bytes = await file.read()
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        img_array = np.array(image)

        # üëâ Convert ·∫£nh sang base64 ƒë·ªÉ l∆∞u v√†o MongoDB
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        image_base64 = "data:image/jpeg;base64," + b64encode(buffered.getvalue()).decode()

        # T√≠nh embedding v·ªõi DeepFace
        embedding_info = DeepFace.represent(
            img_path=img_array,
            model_name="ArcFace",
            enforce_detection=True
        )
        face_descriptor = embedding_info[0]["embedding"]

        # C·∫≠p nh·∫≠t v√†o MongoDB
        result = user_collection.update_one(
            {"_id": ObjectId(user_id)},
            {
                "$set": {
                    "faceDescriptor": face_descriptor,
                    "faceImage": image_base64  # üÜï L∆∞u ·∫£nh th·∫≠t
                }
            }
        )

        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!")

        return {"status": "‚úÖ ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng!"}

    except Exception as e:
        logger.error(f"L·ªói t·∫°i /register: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω: {str(e)}")
    
# === Endpoint: Check-in khu√¥n m·∫∑t ===
@app.post("/checkin")
async def checkin_face(data: ImageData):
    try:
        camera_img = base64_to_image(data.image)

        embedding_info = DeepFace.represent(
            img_path=camera_img,
            model_name="ArcFace",
            enforce_detection=True,
        )
        embedding_checkin = embedding_info[0]["embedding"]

        user = user_collection.find_one({"_id": ObjectId(data.user_id)})
        if not user or "faceDescriptor" not in user:
            raise HTTPException(status_code=404, detail="‚ùå Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω.")

        embedding_registered = user["faceDescriptor"]

        from numpy.linalg import norm
        def cosine_distance(a, b):
            a = np.array(a)
            b = np.array(b)
            return 1 - np.dot(a, b) / (norm(a) * norm(b))

        distance = cosine_distance(embedding_checkin, embedding_registered)

        if distance < 0.35:
            import httpx
            async with httpx.AsyncClient() as client:
                payload = {
                    "userId": data.user_id,
                    "campaignId": data.campaignId,  
                    "phaseId": data.phaseId,        
                    "phasedayId": data.phasedayId,  
                    "method": "face"
                }

                res = await client.post("http://localhost:4000/checkin", json=payload)

                if res.status_code == 201:
                    return {
                        "status": "‚úÖ Check-in th√†nh c√¥ng!",
                        "distance": distance,
                        "saved": True
                    }
                elif res.status_code == 409:
                    return {
                        "status": "‚ö†Ô∏è H√¥m nay checkin r·ªìi √° nha!",
                        "distance": distance,
                        "saved": False
                    }
                else:
                    return {
                        "status": "‚úÖ Nh·∫≠n di·ªán ok nh∆∞ng l·ªói l∆∞u!",
                        "distance": distance,
                        "saved": False,
                        "server_msg": res.text
                    }

        else:
            return {
                "status": f"üö´ Kh√¥ng kh·ªõp khu√¥n m·∫∑t! (Kho·∫£ng c√°ch: {distance:.4f})",
                "distance": distance,
                "saved": False
            }

    except Exception as e:
        logger.error(f"L·ªói t·∫°i /checkin: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói nh·∫≠n di·ªán: {str(e)}")
    
# === Pydantic Models ===
class ChatData(BaseModel):
    message: str
    userId: Optional[str] = None  # C√≥ th·ªÉ kh√¥ng c√≥ n·∫øu l√† guest

# === Endpoint: Chatbot ===
@app.post("/chat")
async def chat(data: ChatData, request: Request):
    try:
        token = request.headers.get("Authorization")  # üéØ L·∫•y token t·ª´ header
        
        # G·ªçi ƒë√∫ng h√†m v·ªõi ƒë·∫ßy ƒë·ªß tham s·ªë
        reply = answer_user_question(
            user_input=data.message,
            user_id=data.userId,
            token=token 
        )
        
        return {"reply": reply}  # Tr·∫£ l·∫°i response chatbot
        
    except Exception as e:
        logger.error(f"L·ªói t·∫°i /chat: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}")
    
# === Kh·ªüi ch·∫°y ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)