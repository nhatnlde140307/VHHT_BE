import { config } from 'dotenv'
import axios from 'axios'
import { AI_EXENTD_MESSAGE } from '../constants/messages.js'
import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { transporter } from '../utils/nodemailerConfig.js';
config()

class AiService {
    async generateCampaignContent({ title, description, location, startDate, endDate, tone, type }) {
        const prompt = `
Vi·∫øt m·ªôt b√†i ƒëƒÉng Facebook ng·∫Øn (~100 t·ª´), b·∫±ng ti·∫øng Vi·ªát, gi·ªçng vƒÉn ${tone}, cho chi·∫øn d·ªãch t√¨nh nguy·ªán sau:
- T√™n chi·∫øn d·ªãch: ${title}
- M√¥ t·∫£ chi·∫øn d·ªãch: ${description}
- ƒê·ªãa ƒëi·ªÉm: ${location}
- Th·ªùi gian: t·ª´ ${startDate} ƒë·∫øn ${endDate}
N·ªôi dung c·∫ßn truy·ªÅn t·∫£i c·∫£m x√∫c, k√™u g·ªçi c·ªông ƒë·ªìng c√πng tham gia.
        `
        try {
            const response = await axios.post(
                'https://api.openai.com/v1/chat/completions',
                {
                    model: 'gpt-4o',
                    messages: [
                        { role: 'system', content: 'B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung thi·ªán nguy·ªán chuy√™n nghi·ªáp.' },
                        { role: 'user', content: prompt }
                    ],
                    max_tokens: 300,
                    temperature: 0.9
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.GPT_API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                }
            )

            return response.data.choices[0]?.message?.content?.trim() || AI_EXENTD_MESSAGE.ERROR_IN_CONTENT
        } catch (error) {
            console.error('AI Error:', error?.response?.data || error.message)
            return AI_EXENTD_MESSAGE.ERROR_IN_CONTENT
        }
    }

    async generateFundraisingContent({ title, goal, description, location, startDate, endDate, tone }) {
        const prompt = `
Vi·∫øt m·ªôt b√†i ƒëƒÉng Facebook ng·∫Øn (~100 t·ª´), b·∫±ng ti·∫øng Vi·ªát, gi·ªçng vƒÉn ${tone}, cho m·ªôt chi·∫øn d·ªãch k√™u g·ªçi quy√™n g√≥p.
- T√™n chi·∫øn d·ªãch: ${title}
- M·ª•c ti√™u k√™u g·ªçi: ${goal}
- M√¥ t·∫£ chi·∫øn d·ªãch: ${description}
B√†i vi·∫øt c·∫ßn lay ƒë·ªông l√≤ng ng∆∞·ªùi, th·ªÉ hi·ªán s·ª± c·∫•p thi·∫øt v√† kh∆°i g·ª£i s·ª± s·∫ª chia. K·∫øt b√†i n√™n c√≥ l·ªùi k√™u g·ªçi m·∫°nh m·∫Ω ƒë·ªÉ m·ªçi ng∆∞·ªùi c√πng chung tay ƒë√≥ng g√≥p.
`;

        try {
            const response = await axios.post(
                'https://api.openai.com/v1/chat/completions',
                {
                    model: 'gpt-4o',
                    messages: [
                        {
                            role: 'system',
                            content: 'B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung k√™u g·ªçi v·ªën v√† quy√™n g√≥p ƒë·∫ßy c·∫£m x√∫c.',
                        },
                        { role: 'user', content: prompt },
                    ],
                    max_tokens: 300,
                    temperature: 0.9, // tƒÉng ƒë·ªô s√°ng t·∫°o nh·∫π
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.GPT_API_KEY}`,
                        'Content-Type': 'application/json',
                    }
                }
            );

            return response.data.choices[0]?.message?.content?.trim() || AI_EXENTD_MESSAGE.ERROR_IN_CONTENT;
        } catch (error) {
            console.error('üî• AI Error (fundraising):', error?.response?.data || error.message);
            return AI_EXENTD_MESSAGE.ERROR_IN_CONTENT;
        }
    }


    async generateThankYouEmail({ recipientName,
        campaignName,
        contributionDetails,
        senderName,
        tone = 'th√¢n thi·ªán',
        evaluationText = '' }) {
        const prompt = `
Vi·∫øt m·ªôt email c·∫£m ∆°n b·∫±ng ti·∫øng Vi·ªát, x∆∞ng h√¥ l√† "b·∫°n", gi·ªçng vƒÉn ${tone}.
G·ª≠i t·ªõi ${recipientName} v√¨ ƒë√£ ${contributionDetails} trong chi·∫øn d·ªãch "${campaignName}".

H√£y nh·∫•n m·∫°nh r·∫±ng: üéñÔ∏è ${evaluationText} ‚Äì n√™n ƒë·∫∑t ri√™ng th√†nh m·ªôt c√¢u ho·∫∑c d√≤ng d·ªÖ nh√¨n th·∫•y.

Email n√™n ch√¢n th√†nh, kho·∫£ng 120‚Äì150 t·ª´, d·ªÖ ƒë·ªçc, c√≥ th·ªÉ k·∫øt th√∫c b·∫±ng l·ªùi c·∫£m ∆°n v√† t√™n ng∆∞·ªùi g·ª≠i l√† ${senderName}.
`;

        try {
            const response = await axios.post(
                'https://api.openai.com/v1/chat/completions',
                {
                    model: 'gpt-4o',
                    messages: [
                        { role: 'system', content: 'B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt email c·∫£m ∆°n thi·ªán nguy·ªán b·∫±ng ti·∫øng Vi·ªát.' },
                        { role: 'user', content: prompt }
                    ],
                    max_tokens: 300,
                    temperature: 0.7
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.GPT_API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                }
            )

            return response.data.choices[0]?.message?.content?.trim()
        } catch (error) {
            console.error('AI Error (Email):', error?.response?.data || error.message)
            return 'C·∫£m ∆°n b·∫°n ƒë√£ tham gia chi·∫øn d·ªãch.'
        }
    }

    async sendDonationSuccessEmail(toEmail, data, attachmentPath = null) {
        const templatePath = path.join(process.cwd(), 'templates', 'donation-bill-email.html');
        let htmlTemplate = fs.readFileSync(templatePath, 'utf-8');

        htmlTemplate = htmlTemplate
            .replace('Nguy·ªÖn VƒÉn A', data.donorName || '·∫®n danh')
            .replace('200.000 VND', `${data.amount.toLocaleString()} VND`)
            .replace('ZLP_24062025_123456', data.transactionCode)
            .replace('·ª¶ng h·ªô l≈© l·ª•t mi·ªÅn Trung', data.campaignTitle)
            .replace('20/06/2025 11:50:00', data.date);

        const mailOptions = {
            from: `"ZaloPay X√°c nh·∫≠n giao d·ªãch" <${process.env.ZALOPAY_EMAIL}>`,
            to: toEmail,
            subject: 'X√°c nh·∫≠n giao d·ªãch ·ªßng h·ªô chi·∫øn d·ªãch th√†nh c√¥ng',
            html: htmlTemplate,
            attachments: attachmentPath ? [{
                filename: 'bien-nhan.pdf',
                path: attachmentPath
            }] : []
        };

        await transporter.sendMail(mailOptions);
    }

    async getPublicIdFromUrl(url) {
        const getPublicIdFromUrl = (url) => {
            const start = url.indexOf('/upload/') + 8
            const end = url.lastIndexOf('.')
            const publicId = url.substring(start, end)
            const decoded = decodeURIComponent(publicId)
            console.log('üéØ Extracted publicId =', decoded)
            return decoded
        }

    }
}

export default new AiService()